/******************************************************************************
*                                                                             *
*    The  3D  Chemical-Potential  Multiphase  Lattice  Boltzmann  Method      *
*                                                                             *
*    Designed by Binghai Wen,  Guangxi Nomal University,  Guilin,  China      *
*                                                                             *
******************************************************************************/

#pragma once
#pragma warning( disable : 4018 )  //signed & unsigned;
#pragma warning( disable : 4267 )  //signed & unsigned;
#pragma warning( disable : 4786 )  //for stl;
#pragma warning( disable : 4996 )  //for sprintf;
 

//*************************************************************************************************
//const int DX = 400;
//const int DY = 400;
//const int DZ = 300;

//const int DX = 501;
//const int DY = 501;
//const int DZ = 151;

const int DY = 301;
const int DX = 301;
const int DZ = 301;

//const int DY = 201;
//const int DX = 201;
//const int DZ = 201;

const int DXYZ = DX*DY*DZ;
const int DXY = DX*DY;

//*************************************************************************************************
const char FLUID = 1;
const char SOLID = 2;
const char LIQUID= 3;
const char LEVEL1= 4;
const char LEVEL2= 5;
const char LEVEL3= 6;


const char SURFACE = 5;
const char SURWRAP = 6;
const int MP_SCORG = 100;
const int MP_SCVDW = 101;
const int MP_SCPRW = 102;
const int MP_SCPRM = 103;
const int MP_SCRKE = 104;
const int MP_SCRKS = 105;
const int MP_SCCSE = 106;
const int MP_CPVDW = 201;
const int MP_CPPRW = 202;
const int MP_CPPRM = 203;
const int MP_CPRKE = 204;
const int MP_CPRKS = 205;
const int MP_CPCSE = 206;
const int MP_P0VDW = 301;
const int MP_P0PRW = 302;
const int MP_P0PRM = 303;
const int MP_P0RKE = 304;
const int MP_P0RKS = 305;
const int MP_P0CSE = 306;

inline const char * Name(const int Model)
{
	switch (Model)
	{
	case MP_SCVDW:	return "SC_VDW";
	case MP_SCPRW:	return "SC_PRW";
	case MP_SCPRM:	return "SC_PRM";
	case MP_SCRKE:	return "SC_RKE";
	case MP_SCRKS:	return "SC_RKS";
	case MP_SCCSE:	return "SC_CSE";
	case MP_CPVDW:	return "CP_VDW";
	case MP_CPPRW:	return "CP_PRW";
	case MP_CPPRM:	return "CP_PRM";
	case MP_CPRKE:	return "CP_RKE";
	case MP_CPRKS:	return "CP_RKS";
	case MP_CPCSE:	return "CP_CSE";
	case MP_P0VDW:	return "P0_VDW";
	case MP_P0PRW:	return "P0_PRW";
	case MP_P0PRM:	return "P0_PRM";
	case MP_P0RKE:	return "P0_RKE";
	case MP_P0RKS:	return "P0_RKS";
	case MP_P0CSE:	return "P0_CSE";
	}
	return "Unknown";
}

//*************************************************************************************************
const int DQ = 19;
const int x  = -1;		  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18 //
__constant__ int Ex[DQ] = { 0,  1,  x,  0,  0,  0,  0,  1,  x,  1,  x,  1,  x,  1,  x,  0,  0,  0,  0 };
__constant__ int Ey[DQ] = { 0,  0,  0,  1,  x,  0,  0,  1,  1,  x,  x,  0,  0,  0,  0,  1,  x,  1,  x };
__constant__ int Ez[DQ] = { 0,  0,  0,  0,  0,  1,  x,  0,  0,  0,  0,  1,  1,  x,  x,  1,  1,  x,  x };
__constant__ int Re[DQ] = { 0,  2,  1,  4,  3,  6,  5, 10,  9,  8,  7, 14, 13, 12, 11, 18, 17, 16, 15 };
__constant__ double Alpha[DQ] = { 1./3, 1./18, 1./18, 1./18, 1./18, 1./18, 1./18, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36, 1./36 };



__constant__ double M[DQ][DQ] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		-30, -11, -11, -11, -11, -11, -11, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		12, -4, -4, -4, -4, -4, -4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 1, -1, 0, 0, 0, 0, 1, -1, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0,
		0, -4, 4, 0, 0, 0, 0, 1, -1, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0,
		0, 0, 0, 1, -1, 0, 0, 1, 1, -1, -1, 0, 0, 0, 0, 1, -1, 1, -1,
		0, 0, 0, -4, 4, 0, 0, 1, 1, -1, -1, 0, 0, 0, 0, 1, -1, 1, -1,
		0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, -1, -1, 1, 1, -1, -1,
		0, 0, 0, 0, 0, -4, 4, 0, 0, 0, 0, 1, 1, -1, -1, 1, 1, -1, -1,
		0, 2, 2, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -2, -2, -2, -2,
		0, -4, -4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, -2, -2, -2, -2,
		0, 0, 0, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 0, 0, 0, 0,
		0, 0, 0, -2, -2, 2, 2, 1, 1, 1, 1, -1, -1, -1, -1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1, -1, 1, -1, -1, 1, -1, 1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 1, -1, 1, -1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, -1, -1, -1, 1, 1      
		}; 

__constant__ double R[DQ][DQ] = {
		1./19, -5./399, 1./21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, 1./10, -1./10, 0, 0, 0, 0, 1./18, -1./18, 0, 0, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, -1./10, 1./10, 0, 0, 0, 0, 1./18, -1./18, 0, 0, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, 0, 0, 1./10, -1./10, 0, 0, -1./36, 1./36, 1./12, -1./12, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, 0, 0, -1./10, 1./10, 0, 0, -1./36, 1./36, 1./12, -1./12, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, 0, 0, 0, 0, 1./10, -1./10, -1./36, 1./36, -1./12, 1./12, 0, 0, 0, 0, 0, 0, 
		1./19, -11./2394, -1./63, 0, 0, 0, 0, -1./10, 1./10, -1./36, 1./36, -1./12, 1./12, 0, 0, 0, 0, 0, 0, 
		1./19, 4./1197, 1./252, 1./10, 1./40, 1./10, 1./40, 0, 0, 1./36, 1./72, 1./12, 1./24, 1./4, 0, 0, 1./8, -1./8, 0, 
		1./19, 4./1197, 1./252, -1./10, -1./40, 1./10, 1./40, 0, 0, 1./36, 1./72, 1./12, 1./24, -1./4, 0, 0, -1./8, -1./8, 0, 
		1./19, 4./1197, 1./252, 1./10, 1./40, -1./10, -1./40, 0, 0, 1./36, 1./72, 1./12, 1./24, -1./4, 0, 0, 1./8, 1./8, 0, 
		1./19, 4./1197, 1./252, -1./10, -1./40, -1./10, -1./40, 0, 0, 1./36, 1./72, 1./12, 1./24, 1./4, 0, 0, -1./8, 1./8, 0, 
		1./19, 4./1197, 1./252, 1./10, 1./40, 0, 0, 1./10, 1./40, 1./36, 1./72, -1./12, -1./24, 0, 0, 1./4, -1./8, 0, 1./8, 
		1./19, 4./1197, 1./252, -1./10, -1./40, 0, 0, 1./10, 1./40, 1./36, 1./72, -1./12, -1./24, 0, 0, -1./4, 1./8, 0, 1./8, 
		1./19, 4./1197, 1./252, 1./10, 1./40, 0, 0, -1./10, -1./40, 1./36, 1./72, -1./12, -1./24, 0, 0, -1./4, -1./8, 0, -1./8, 
		1./19, 4./1197, 1./252, -1./10, -1./40, 0, 0, -1./10, -1./40, 1./36, 1./72, -1./12, -1./24, 0, 0, 1./4, 1./8, 0, -1./8, 
		1./19, 4./1197, 1./252, 0, 0, 1./10, 1./40, 1./10, 1./40, -1./18, -1./36, 0, 0, 0, 1./4, 0, 0, 1./8, -1./8, 
		1./19, 4./1197, 1./252, 0, 0, -1./10, -1./40, 1./10, 1./40, -1./18, -1./36, 0, 0, 0, -1./4, 0, 0, -1./8, -1./8, 
		1./19, 4./1197, 1./252, 0, 0, 1./10, 1./40, -1./10, -1./40, -1./18, -1./36, 0, 0, 0, -1./4, 0, 0, 1./8, 1./8, 
		1./19, 4./1197, 1./252, 0, 0, -1./10, -1./40, -1./10, -1./40, -1./18, -1./36, 0, 0, 0, 1./4, 0, 0, -1./8, 1./8 
		}; 


#define D(x)   (double(x))
#define Sq(x)  ((x)*(x))
#define Cu(x)  ((x)*(x)*(x))
#define PI = 3.14159265358979323846264338327950288;
__constant__ double S2 = 1.4142135623730950488016887242097;   //sqrt(2.0);


//*************************************************************************************************
inline bool Eq(double x, double y, double d = 1E-12)
{
	return (x>y ? x - y : y - x) < d;
}


//*************************************************************************************************
#define I(x,y,z)  ((x)*DY*DZ + (y)*DZ + (z))
#define Define_ijk5  int i2=(i >0?i-1 :DX-1), i4=(i <DX-1?i+1 :0), j2=(j >0?j-1 :DY-1), j4=(j <DY-1?j+1 :0), k2=(k >0?k-1 :DZ-1), k4=(k <DZ-1?k+1 :0); \
				     int i1=(i2>0?i2-1:DX-1), i5=(i4<DX-1?i4+1:0), j1=(j2>0?j2-1:DY-1), j5=(j4<DY-1?j4+1:0), k1=(k2>0?k2-1:DZ-1), k5=(k4<DZ-1?k4+1:0); 

#define GradX5( x )  ((  \
		(x[I(i1,j, k )] - x[I(i2,j ,k )] * 8 + x[I(i4,j ,k )] * 8 - x[I(i5,j ,k )]) * 2 +  \
		(x[I(i1,j, k1)] - x[I(i2,j ,k2)] * 8 + x[I(i4,j ,k4)] * 8 - x[I(i5,j ,k5)])     +  \
		(x[I(i1,j, k5)] - x[I(i2,j ,k4)] * 8 + x[I(i4,j ,k2)] * 8 - x[I(i5,j ,k1)])     +  \
		(x[I(i1,j1,k )] - x[I(i2,j2,k )] * 8 + x[I(i4,j4,k )] * 8 - x[I(i5,j5,k )])     +  \
		(x[I(i1,j5,k )] - x[I(i2,j4,k )] * 8 + x[I(i4,j2,k )] * 8 - x[I(i5,j1,k )]))    / 72 )

#define GradY5( x )  ((  \
		(x[I(i ,j1,k )] - x[I(i ,j2,k )] * 8 + x[I(i, j4,k )] * 8 - x[I(i, j5,k )]) * 2 +  \
		(x[I(i ,j1,k1)] - x[I(i ,j2,k2)] * 8 + x[I(i, j4,k4)] * 8 - x[I(i, j5,k5)])     +  \
		(x[I(i ,j1,k5)] - x[I(i ,j2,k4)] * 8 + x[I(i, j4,k2)] * 8 - x[I(i, j5,k1)])     +  \
		(x[I(i1,j1,k )] - x[I(i2,j2,k )] * 8 + x[I(i4,j4,k )] * 8 - x[I(i5,j5,k )])     +  \
		(x[I(i5,j1,k )] - x[I(i4,j2,k )] * 8 + x[I(i2,j4,k )] * 8 - x[I(i1,j5,k )]))    / 72 )

#define GradZ5( x )  ((  \
		(x[I(i, j, k1)] - x[I(i, j, k2)] * 8 + x[I(i, j, k4)] * 8 - x[I(i, j, k5)]) * 2 +  \
		(x[I(i1,j, k1)] - x[I(i2,j, k2)] * 8 + x[I(i4,j, k4)] * 8 - x[I(i5,j, k5)])     +  \
		(x[I(i5,j, k1)] - x[I(i4,j, k2)] * 8 + x[I(i2,j, k4)] * 8 - x[I(i1,j, k5)])     +  \
		(x[I(i ,j1,k1)] - x[I(i ,j2,k2)] * 8 + x[I(i ,j4,k4)] * 8 - x[I(i, j5,k5)])     +  \
		(x[I(i ,j5,k1)] - x[I(i ,j4,k2)] * 8 + x[I(i ,j2,k4)] * 8 - x[I(i, j1,k5)]))    / 72 )

#define GradD5( x )  (( -x[I(i,j,k)] * 90 +  \
		(-x[I(i1,j, k )] + x[I(i2,j ,k )] * 16 + x[I(i4,j, k )] * 16 - x[I(i5,j,  k)]) +  \
		(-x[I(i, j1,k )] + x[I(i ,j2,k )] * 16 + x[I(i ,j4,k )] * 16 - x[I(i, j5, k)]) +  \
		(-x[I(i, j, k1)] + x[I(i ,j, k2)] * 16 + x[I(i ,j, k4)] * 16 - x[I(i, j, k5)])) / 12 ) 

#define GradcX5( x )  ((  \
		(x[i1][j][ k ] - x[i2][j ][k ] * 8 + x[i4][j ][k ] * 8 - x[i5][j ][k ]) * 2 +  \
		(x[i1][j][ k1] - x[i2][j ][k2] * 8 + x[i4][j ][k4] * 8 - x[i5][j ][k5])     +  \
		(x[i1][j][ k5] - x[i2][j ][k4] * 8 + x[i4][j ][k2] * 8 - x[i5][j ][k1])     +  \
		(x[i1][j1][k ] - x[i2][j2][k ] * 8 + x[i4][j4][k ] * 8 - x[i5][j5][k ])     +  \
		(x[i1][j5][k ] - x[i2][j4][k ] * 8 + x[i4][j2][k ] * 8 - x[i5][j1][k ]))    / 72 )
#define GradcZ5( x )  ((  \
		(x[i][ j][ k1] - x[i][ j][ k2] * 8 + x[i][ j][ k4] * 8 - x[i][ j][ k5]) * 2 +  \
		(x[i1][j][ k1] - x[i2][j][ k2] * 8 + x[i4][j][ k4] * 8 - x[i5][j][ k5])     +  \
		(x[i5][j][ k1] - x[i4][j][ k2] * 8 + x[i2][j][ k4] * 8 - x[i1][j][ k5])     +  \
		(x[i ][j1][k1] - x[i ][j2][k2] * 8 + x[i ][j4][k4] * 8 - x[i][ j5][k5])     +  \
		(x[i ][j5][k1] - x[i ][j4][k2] * 8 + x[i ][j2][k4] * 8 - x[i][ j1][k5]))    / 72 )

#define GradcY5( x )  ((  \
		(x[i ][j1][k ] - x[i ][j2][k ] * 8 + x[i][ j4][k ] * 8 - x[i][ j5][k ]) * 2 +  \
		(x[i ][j1][k1] - x[i ][j2][k2] * 8 + x[i][ j4][k4] * 8 - x[i][ j5][k5])     +  \
		(x[i ][j1][k5] - x[i ][j2][k4] * 8 + x[i][ j4][k2] * 8 - x[i][ j5][k1])     +  \
		(x[i1][j1][k ] - x[i2][j2][k ] * 8 + x[i4][j4][k ] * 8 - x[i5][j5][k ])     +  \
		(x[i5][j1][k ] - x[i4][j2][k ] * 8 + x[i2][j4][k ] * 8 - x[i1][j5][k ]))    / 72 )


#define Define_ijk7  int i3=(i >0?i -1:DX-1),i5=(i <DX-1?i +1:0),  j3=(j >0?j -1:DY-1),j5=(j <DY-1?j +1:0),  k3=(k >0?k -1:DZ-1),k5=(k <DZ-1?k +1:0);\
				     int i2=(i3>0?i3-1:DX-1),i6=(i5<DX-1?i5+1:0),  j2=(j3>0?j3-1:DY-1),j6=(j5<DY-1?j5+1:0),  k2=(k3>0?k3-1:DZ-1),k6=(k5<DZ-1?k5+1:0);\
				     int i1=(i2>0?i2-1:DX-1),i7=(i6<DX-1?i6+1:0),  j1=(j2>0?j2-1:DY-1),j7=(j6<DY-1?j6+1:0),  k1=(k2>0?k2-1:DZ-1),k7=(k6<DZ-1?k6+1:0)
#define GradX7( x )  ((-x[I(i1,j,k)] + x[I(i2,j,k)] * 9 - x[I(i3,j,k)] * 45 + x[I(i5,j,k)] * 45 - x[I(i6,j,k)] * 9 + x[I(i7,j,k)] ) / 60)
#define GradY7( x )  ((-x[I(i,j1,k)] + x[I(i,j2,k)] * 9 - x[I(i,j3,k)] * 45 + x[I(i,j5,k)] * 45 - x[I(i,j6,k)] * 9 + x[I(i,j7,k)] ) / 60) 
#define GradZ7( x )  ((-x[I(i,j,k1)] + x[I(i,j,k2)] * 9 - x[I(i,j,k3)] * 45 + x[I(i,j,k5)] * 45 - x[I(i,j,k6)] * 9 + x[I(i,j,k7)] ) / 60)

#define Gradx7( x )  ((\
        (-x[I(i1, j, k)] + x[I(i2, j, k)] * 9 - x[I(i3, j, k)] * 45 + x[I(i5, j, k)] * 45 - x[I(i6, j, k)] * 9 + x[I(i7, j, k)])    * 2   +\
		(-x[I(i1, j, k1)] + x[I(i2, j, k2)] * 9 - x[I(i3, j, k3)] * 45 + x[I(i5, j, k5)] * 45 - x[I(i6, j, k6)] * 9 + x[I(i7, j, k7)])    +\
	    (-x[I(i1, j, k7)] + x[I(i2, j, k6)] * 9 - x[I(i3, j, k5)] * 45 + x[I(i5, j, k3)] * 45 - x[I(i6, j, k2)] * 9 + x[I(i7, j, k1)])    +\
		(-x[I(i1, j1, k)] + x[I(i2, j2, k)] * 9 - x[I(i3, j3, k)] * 45 + x[I(i5, j5, k)] * 45 - x[I(i6, j6, k)] * 9 + x[I(i7, j7, k)])    +\
		(-x[I(i1, j7, k)] + x[I(i2, j6, k)] * 9 - x[I(i3, j5, k)] * 45 + x[I(i5, j3, k)] * 45 - x[I(i6, j2, k)] * 9 + x[I(i7, j1, k)]))   /360)

#define Grady7( x )  ((\
	    (-x[I(i, j1, k)] + x[I(i, j2, k)] * 9 - x[I(i, j3, k)] * 45 + x[I(i, j5, k)] * 45 - x[I(i, j6, k)] * 9 + x[I(i, j7, k)])   * 2 + \
	    (-x[I(i, j1, k1)] + x[I(i, j2, k2)] * 9 - x[I(i, j3, k3)] * 45 + x[I(i, j5, k5)] * 45 - x[I(i, j6, k6)] * 9 + x[I(i, j7, k7)]) + \
	    (-x[I(i, j1, k7)] + x[I(i, j2, k6)] * 9 - x[I(i, j3, k5)] * 45 + x[I(i, j5, k3)] * 45 - x[I(i, j6, k2)] * 9 + x[I(i, j7, k1)]) + \
	    (-x[I(i1, j1, k)] + x[I(i2, j2, k)] * 9 - x[I(i3, j3, k)] * 45 + x[I(i5, j5, k)] * 45 - x[I(i6, j6, k)] * 9 + x[I(i7, j7, k)]) + \
     	(-x[I(i7, j1, k)] + x[I(i6, j2, k)] * 9 - x[I(i5, j3, k)] * 45 + x[I(i3, j5, k)] * 45 - x[I(i2, j6, k)] * 9 + x[I(i1, j7, k)])) / 360)

#define Gradz7( x )  ((\
	    (-x[I(i, j, k1)] + x[I(i, j, k2)] * 9 - x[I(i, j, k3)] * 45 + x[I(i, j, k5)] * 45 - x[I(i, j, k6)] * 9 + x[I(i, j, k7)])   * 2 + \
	    (-x[I(i1, j, k1)] + x[I(i2, j, k2)] * 9 - x[I(i3, j, k3)] * 45 + x[I(i5, j, k5)] * 45 - x[I(i6, j, k6)] * 9 + x[I(i7, j, k7)]) + \
	    (-x[I(i7, j, k1)] + x[I(i6, j, k2)] * 9 - x[I(i5, j, k3)] * 45 + x[I(i3, j, k5)] * 45 - x[I(i2, j, k6)] * 9 + x[I(i1, j, k7)]) + \
    	(-x[I(i, j1, k1)] + x[I(i, j2, k2)] * 9 - x[I(i, j3, k3)] * 45 + x[I(i, j5, k5)] * 45 - x[I(i, j6, k6)] * 9 + x[I(i, j7, k7)]) + \
	    (-x[I(i, j7, k1)] + x[I(i, j6, k2)] * 9 - x[I(i, j5, k3)] * 45 + x[I(i, j3, k5)] * 45 - x[I(i, j2, k6)] * 9 + x[I(i, j1, k7)])) / 360)

#define GradD7(x)  (  - x[I(i,j,k)] * 490 * 3+ \
		(2*x[I(i1, j , k )]  - 27 * x[I(i2, j , k )] + 270 * x[I(i3, j , k )] + 270 * x[I(i5, j , k )] - 27 * x[I(i6, j , k )] + 2 * x[I(i7, j , k )])+ \
		(2*x[I(i , j1, k )]  - 27 * x[I(i , j2, k )] + 270 * x[I(i , j3, k )] + 270 * x[I(i , j5, k )] - 27 * x[I(i , j6, k )] + 2 * x[I(i , j7, k )])+ \
		(2*x[I(i , j , k1)]  - 27 * x[I(i , j , k2)] + 270 * x[I(i , j , k3)] + 270 * x[I(i , j , k5)] - 27 * x[I(i , j , k6)] + 2 * x[I(i , j , k7)]))/180


#define FOR_iDX_jDY_kDZ for (int i = 0; i < DX; ++i) for (int j = 0; j < DY; ++j) for (int k = 0; k < DZ; ++k)
#define FOR_iDX_jDY_kDZ_Fluid for (int i = 0; i < DX; ++i) for (int j = 0; j < DY; ++j) for (int k = 0; k < DZ; ++k) if( FLUID == Type[I(i,j,k)])
